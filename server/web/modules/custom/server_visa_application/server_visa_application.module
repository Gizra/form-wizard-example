<?php

/**
 * @file
 * Contains server_visa_application.module.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityDisplayRepository;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Messenger\MessengerInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Session\AccountInterface;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\field\FieldConfigInterface;
use Drupal\node\NodeInterface;
use Drupal\server_visa_application\VisaApplicationManagerInterface;

/**
 * Implements hook_theme().
 */
function server_visa_application_theme() {
  return [
    'server_visa_application_overview' => [
      'variables' => [
        'user' => NULL,
        'user_picture' => NULL,
        'sections_status' => [],
        'current_year' => NULL,
      ],
    ],
    'node_visa_application_section_form' => [
      'render element' => 'form',
    ],
  ];
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Specific form alters for Section 2.
 *
 * Set "Other" for the "Travel purpose" to appear only when checked.
 */
function server_visa_application_form_node_visa_application_section_2_form_alter(&$form, FormStateInterface $form_state) {
  $form['field_travel_purpose_other']['#states'] = [
    'visible' => [
      ':input[name="field_travel_purpose"]' => ['value' => 'other'],
    ],
  ];

  $form['field_travel_purpose_other']['#attributes']['class'][] = 'indent-form-element';
}


/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Specific form alters for Section 3.
 *
 * Set "Confirmation" checkbox to required. We don't do this on the field
 * settings as we want to let admins edit the application node, without needing
 * to check the checkbox.Instead, we make it required only under the wizard
 * context.
 */
function server_visa_application_form_node_visa_application_section_3_form_alter(&$form, FormStateInterface $form_state) {
  $form['field_application_confirmation']['widget']['value']['#required'] = TRUE;
}

/**
 * Implements hook_form_alter().
 */
function server_visa_application_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $is_valid_form = FALSE;
  foreach (range(1, \Drupal\server_visa_application\VisaApplicationManagerInterface::CONFIRMATION_SECTION_NUMBER) as $index) {
    if ($form_id == 'node_visa_application_section_' . $index . '_form') {
      $is_valid_form = TRUE;
      continue;
    }
  }

  if (!$is_valid_form) {
    // Not a Visa application form.
    return;
  }

  $section_number = \Drupal::routeMatch()->getParameter('section_number');

  $form['section_number'] = [
    '#type' => 'value',
    '#value' => $section_number,
  ];

  /** @var \Drupal\server_visa_application\VisaApplicationManagerInterface $visa_application_manager */
  $visa_application_manager = Drupal::service('server_visa_application.manager');
  $application_node = $visa_application_manager->getApplicationNodeByUser(Drupal::currentUser());

  $form['section_status'] = [
    '#type' => 'value',
    '#value' => $visa_application_manager->getSectionStatus($application_node, $section_number),
  ];

  // If application is not `New`, then everything should be disabled, as it's
  // locked for editing by the applicant.
  $is_application_locked = $application_node->field_application_status->value != VisaApplicationManagerInterface::APPLICATION_NEW;

  // If we're on the Confirmation section, then we should be sure to have all other
  // sections completed.
  $is_confirmation_section_locked = $section_number == VisaApplicationManagerInterface::CONFIRMATION_SECTION_NUMBER
    && !$visa_application_manager->applicationCanBeSigned($application_node);

  if ($is_application_locked || $is_confirmation_section_locked) {
    $form['#disabled'] = TRUE;
    unset($form['actions']);
  }

  // Section status messages.
  if ($is_confirmation_section_locked && !$is_application_locked) {
    $form['section_status_message'] = [
      '#markup' => t('Waiver section cannot be submitted, as previous sections are not complete yet.'),
    ];
  }

  $form['current_language'] = [
    '#type' => 'value',
    '#value' => \Drupal::languageManager()->getCurrentLanguage()->getId(),
  ];


  $form['actions']['preview']['#access'] = FALSE;
  $form['actions']['delete']['#access'] = FALSE;

  $form['#theme'][] = 'node_visa_application_section_form';
  $form['actions']['submit']['#submit'][] = 'server_visa_application_redirect_form_submit';
  $form['actions']['submit']['#submit'][] = 'server_visa_application_hide_status_message';

  // Hide vertical tabs and revision log.
  $form['revision_information']['#access'] = FALSE;
  $form['meta']['#access'] = FALSE;
  $form['menu']['#access'] = FALSE;
}

/**
 * Submit handler; Handle redirect from sections.
 *
 * - If section not completed, keep wizard on the same section.
 * - If section completed, redirect to next section.
 * - If waiver completed (last section), redirect to the overview page.
 */
function server_visa_application_redirect_form_submit($form, FormStateInterface $form_state) {
  /** @var \Drupal\server_visa_application\VisaApplicationManagerInterface $application_manager */
  $application_manager = \Drupal::service('server_visa_application.manager');

  $visa_application = $form_state->getFormObject()->getEntity();
  $section_number = $form_state->getValue('section_number');
  $section_status = $application_manager->getSectionStatus($visa_application, $section_number);

  if ($section_number == $application_manager::CONFIRMATION_SECTION_NUMBER
    && $section_status == $application_manager::SECTION_LOCKED
  ) {
    // Redirect back to overview page.
    $form_state->setRedirect('server_visa_application.server_visa_application_overview');
    return;
  }

  if ($section_status == $application_manager::SECTION_COMPLETE) {
    // Redirect to next section.
    $section_number = $section_number + 1;
  }

  $form_state->setRedirect(
    'server_visa_application.server_visa_application_form',
    ['section_number' => $section_number]
  );
}

/**
 * Submit handler; Hide the node create/ update messages and add custom.
 *
 * @see https://knackforge.com/blog/gurumoorthi/hide-and-override-drupal-status-messages
 */
function server_visa_application_hide_status_message($form, FormStateInterface $form_state) {
  $messenger = \Drupal::messenger();
  $messenger->deleteByType(MessengerInterface::TYPE_STATUS);

  $messenger->addMessage(t('Section saved.'));
}

/**
 * Implements hook_inline_entity_form_table_fields_alter().
 *
 * Remove `Status` from Inline entity form table.
 */
function server_visa_application_inline_entity_form_table_fields_alter(&$fields, $context) {
  if ($context['parent_bundle'] != 'visa_application') {
    return;
  }

  unset($fields['status']);
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function server_visa_application_form_field_config_edit_form_alter(&$form, FormStateInterface $form_state) {
  /** @var \Drupal\field\FieldConfigInterface $field_config */
  $field_config = $form_state->getFormObject()->getEntity();

  $application_content_types = [
    'visa_application',
  ];

  // The structure of the ID: entity_type.bundle.field_name .
  $field_type = explode('.', $field_config->id())[1];
  if (!in_array($field_type, $application_content_types)) {
    // Not involving in the application process.
    return;
  }

  $form['third_party_settings']['server_visa_application']['faux_required'] = [
    '#type' => 'checkbox',
    '#title' => t('Faux required'),
    '#description' => t('Mark as required for the Visa application wizard, so we know if a section is partially filled, or completed.'),
    '#default_value' => $field_config->getThirdPartySetting('server_visa_application', 'faux_required'),
  ];
}

/**
 * Implements hook_element_info_alter().
 */
function server_visa_application_element_info_alter(array &$types) {
  if (isset($types['radios'])) {
    $types['radios']['#process'][] = 'server_visa_application_remove_radio_na';
  }

  if (isset($types['address_country'])) {
    $types['address_country']['#process'][] = 'server_visa_application_address_country_add_faux_required';
  }
}

/**
 * Implements hook_entity_type_alter().
 *
 * Use our own Inline entity form handler.
 *
 * @see inline_entity_form_entity_type_build()
 */
function server_visa_application_entity_type_alter(array &$entity_types)
{
  if (isset($entity_types['node'])) {
    /** @var \Drupal\Core\Entity\EntityTypeInterface[] $entity_types */
    $entity_types['node']->setHandlerClass(
      'inline_form',
      '\Drupal\server_visa_application\Form\VisaApplicationNodeInlineForm'
    );
  }
}



/**
 * Process callback for "Country code" elements on application form.
 *
 * As "country_code" element is its own form element, we need to make sure the
 * logic of faux required has effect on it as-well.
 *
 * @see \Drupal\address\Element\Country::processCountry
 */
function server_visa_application_address_country_add_faux_required($element, FormStateInterface $form_state, $form) {
  if (strpos($form['#form_id'], 'node_visa_application_section_') !== 0) {
    return $element;
  }

  if (!empty($element['#faux_required'])) {
    $element['country_code']['#faux_required'] = TRUE;
    $element['country_code']['#label_attributes']['class'][] = 'form-required';
  }

  return $element;
}

/**
 * Process callback for "Radio" elements on application form.
 *
 * - Removes N/A option from boolean radios and select lists.
 * - Sets 'Yes' as first option for boolean radios.
 */
function server_visa_application_remove_radio_na($element, FormStateInterface $form_state, $form) {
  if (strpos($form['#form_id'], 'node_visa_application_section_') !== 0) {
    return $element;
  }

  $field_type = FieldStorageConfig::loadByName($form['#entity_type'], $element['#field_name'])->getType();

  if ($field_type == 'boolean') {
    // Remove N/A.
    unset($element['_none']);
    // Display No after Yes.
    $element['0']['#weight'] = 10;
  }

  if ($field_type == 'list_string') {
    // Remove N/A.
    unset($element['_none']);
  }

  return $element;
}

/**
 * Implements hook_node_access().
 *
 * Allow editing Teacher evaluation node based on unique access token.
 */
function server_visa_application_node_access(NodeInterface $node, $op, AccountInterface $account) {
  $neutral = AccessResult::neutral();

  $bundles = [
    'companion',
    'visa_application',
  ];

  if (!in_array($node->bundle(), $bundles)) {
    // Not a node related to a Visa application.
    return $neutral;
  }

  $admin_access = $account->hasPermission('administer nodes') ? AccessResult::allowed() : AccessResult::forbidden();

  if ($op == 'view') {
    return $admin_access;
  }

  $route_name = \Drupal::routeMatch()->getRouteName();
  if ($op == 'update' && $route_name == 'entity.node.edit_form') {
    // Node edit route.
    return $admin_access;
  }

  return AccessResult::allowed();
}

/**
 * Implements hook_node_presave().
 */
function server_visa_application_node_presave(NodeInterface $node) {
  server_visa_application_set_status_after_confirmation($node);
}

/**
 * Check Application status, if confirmation was submitted.
 *
 * @param \Drupal\node\NodeInterface $node
 *   The Visa application node.
 */
function server_visa_application_set_status_after_confirmation(NodeInterface $node) {
  if ($node->bundle() != 'visa_application') {
    // Not a Student application.
    return;
  }

  if ($node->isNew()) {
    // Not a saved node.
    return;
  }

  if (empty($node->original)) {
    // Not a Pre-saved node.
    return;
  }

  // If admin has changed status back to `New` to allow applicant to re-edit
  // the application, then clear the Confirmation section fields.
  if ($node->original->field_application_status->value != VisaApplicationManagerInterface::APPLICATION_NEW
    && $node->field_application_status->value == VisaApplicationManagerInterface::APPLICATION_NEW) {
    $node->field_application_confirmation->value = NULL;
  }

  // Lock Application if Confirmation was given.
  if (!empty($node->field_application_confirmation->value)
    && $node->field_application_status->value == VisaApplicationManagerInterface::APPLICATION_NEW) {
    $node->field_application_status->value = VisaApplicationManagerInterface::APPLICATION_LOCKED;
  }
}


/**
 * Implements hook_entity_type_build().
 *
 * Register all form modes for nodes.
 *
 * This is copied from "forms_steps" module.
 * @see https://git.drupalcode.org/project/forms_steps/blob/d6618ad1383dffbe1cd9ab52f28cd7425b8a4721/src/Service/FormsStepsManager.php#L225-250
 *
 * @see forms_steps_entity_type_build()
 */
function server_visa_application_entity_type_build(array &$entity_types) {
  /** @var EntityDisplayRepository $entity_display_repository */
  $entity_display_repository = \Drupal::service('entity_display.repository');

  $all_form_modes = [];
  $form_modes = $entity_display_repository->getFormModes('node');

  foreach ($form_modes as $key => $value) {
    if (!empty($key) && $value['targetEntityType'] === 'node') {
      $all_form_modes['node'][] = $key;
    }
  }

  // We parse each entity type.
  foreach ($all_form_modes as $entity_type_id => $form_modes) {
    // We parse and set each form_mode.
    foreach ($form_modes as $form_mode) {
      $entity_types[$entity_type_id]->setFormClass(
        $form_mode,
        'Drupal\node\NodeForm'
      );
    }
  }
}


/**********************************
 * Theme
 **********************************/

/**
 * Implements hook_field_widget_form_alter().
 *
 * Mark faux required fields with `form-required` class.
 */
function server_visa_application_field_widget_form_alter(&$element, FormStateInterface &$form_state, $context) {
  if (!empty($element['#required'])) {
    // Element is already marked as required.
    return;
  }

  if (empty($context['form']['#attributes']['class'][0]) || strpos($context['form']['#attributes']['class'][0], 'node-visa-application-section-') !== 0) {
    // Not in wizard context (most likely in node edit).
    return;
  }

  /** @var \Drupal\field\Entity\FieldConfig $field_definition */
  $field_definition = $context['items']->getFieldDefinition();
  if (!($field_definition instanceof FieldConfigInterface)) {
    // Not a configurable field.
    return;
  }
  if (!$field_definition->getThirdPartySetting('server_visa_application', 'faux_required', FALSE)) {
    // Faux required is not enabled.
    return;
  }

  $element['#label_attributes']['class'][] = 'form-required';
  // Pass along to preprocess functions the info.
  $element['#faux_required'] = TRUE;

  $element_copy = $element;
  $element_children = Element::children($element_copy);

  // This is a more complex field (e.g. a fieldset or checkboxes).
  foreach ($element_children as $key) {
    $element[$key]['#label_attributes']['class'][] = 'form-required';
    $element[$key]['#faux_required'] = TRUE;
  }
}

/**
 * Preprocess details; Mark `faux required` as `required`.
 */
function server_visa_application_preprocess_details(&$variables) {
  server_visa_application_mark_faux_required_as_required($variables);
}

/**
 * Preprocess fieldset; Mark `faux required` as `required`.
 */
function server_visa_application_preprocess_fieldset(&$variables) {
  server_visa_application_mark_faux_required_as_required($variables);
}

/**
 * Preprocess datetime; Mark `faux required` as `required`.
 */
function server_visa_application_preprocess_datetime_wrapper(&$variables) {
  server_visa_application_mark_faux_required_as_required($variables);
}

/**
 * Mark `faux required` as `required`.
 *
 * @param array $variables
 *   Variables array passed by reference.
 */
function server_visa_application_mark_faux_required_as_required(array &$variables) {
  if (!empty($variables['required'])) {
    // Already marked as required.
    return;
  }

  $element = $variables['element'];
  $variables['required'] = !empty($variables['required']) || !empty($element['#faux_required']);
}
