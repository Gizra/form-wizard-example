<?php

/**
 * @file
 * Contains server_visa_application.module.
 */

use Drupal\Core\Entity\EntityDisplayRepository;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_theme().
 */
function server_visa_application_theme() {
  return [
    'server_visa_application' => [
      'render element' => 'children',
    ],
  ];
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function server_visa_application_form_field_config_edit_form_alter(&$form, FormStateInterface $form_state) {
  /** @var \Drupal\field\FieldConfigInterface $field_config */
  $field_config = $form_state->getFormObject()->getEntity();

  $application_content_types = [
    'visa_application',
  ];

  // The structure of the ID: entity_type.bundle.field_name .
  $field_type = explode('.', $field_config->id())[1];
  if (!in_array($field_type, $application_content_types)) {
    // Not involving in the application process.
    return;
  }

  $form['third_party_settings']['server_visa_application']['faux_required'] = [
    '#type' => 'checkbox',
    '#title' => t('Faux required'),
    '#description' => t('Mark as required for the Visa application wizard, so we know if a section is partially filled, or completed.'),
    '#default_value' => $field_config->getThirdPartySetting('server_visa_application', 'faux_required'),
  ];
}

/**
 * Adds faux required for address - country subfield.
 *
 * @todo: needed?
 */
function server_visa_application_address_faux_required($element) {
  $element['country_code']['#title'] .= '<span class="form-required" title="' . t('This field is required.') . '"></span>';
  return $element;
}


/**
 * Implements hook_entity_type_build().
 *
 * Register all form modes for nodes.
 *
 * This is copied from "forms_steps" module.
 * @see https://git.drupalcode.org/project/forms_steps/blob/d6618ad1383dffbe1cd9ab52f28cd7425b8a4721/src/Service/FormsStepsManager.php#L225-250
 *
 * @see forms_steps_entity_type_build()
 */
function server_visa_application_entity_type_build(array &$entity_types) {
  /** @var EntityDisplayRepository $entity_display_repository */
  $entity_display_repository = \Drupal::service('entity_display.repository');

  $all_form_modes = [];
  $form_modes = $entity_display_repository->getFormModes('node');

  foreach ($form_modes as $key => $value) {
    if (!empty($key) && $value['targetEntityType'] === 'node') {
      $all_form_modes['node'][] = $key;
    }
  }

  // We parse each entity type.
  foreach ($all_form_modes as $entity_type_id => $form_modes) {
    // We parse and set each form_mode.
    foreach ($form_modes as $form_mode) {
      $entity_types[$entity_type_id]->setFormClass(
        $form_mode,
        'Drupal\node\NodeForm'
      );
    }
  }
}
